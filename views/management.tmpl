<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <title>Email Search</title>
    <link
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      body {
        background-color: #192734;
      }
      .fixed-bottom-left {
        position: fixed;
        left: 0;
        top: 0;
        margin: 20px;
      }
      .button-container {
        display: flex;
        justify-content: center;
        align-items: center;
      }

      /* Add your modal styles here */
      .modal {
        display: none;
        background-color: rgba(0, 0, 0, 0.5);
        overflow:scroll;
        
      }

      .subModal {
        display: none;
        background-color: rgba(0, 0, 0, 0.5);
        overflow:scroll;
        
      }

      .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
      }

      .close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 20px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div class="container">
          <div class="col-md-6 my-2">
            <a href="/nav/purchase" class="btn btn-primary">Checkout</a>
            <a href="#" class="btn btn-danger" onClick="refreshPage()"
              >Logout</a
            >
          </div>
        </div>
      </div>
      <div class="col-md-6 mx-auto">
        <div class="card mb-4">
          <div class="card-header">
            <h4 class="card-title">Search By Email Address</h4>
          </div>
          <div class="card-body">
            <form action="javascript:emailSearch()">
              <div class="form-group">
                <input
                  type="email"
                  class="form-control"
                  id="emailInput"
                  aria-describedby="emailHelp"
                  placeholder="Enter email"
                />
              </div>
              <div class="button-container">
                <button type="submit" id="submitBtn" class="btn btn-primary">
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div class="col-md-12 mx-auto">
        <div class="card">
          <div class="card-header">
            <h4 class="card-title">Results</h4>
          </div>
          <div id="resultsBody" class="card-body">
            <table class="table" id="subTable">
              <thead>
                <tr>
                  <th scope="col">Created At</th>

                  <th scope="col">Status</th>
                  <th scope="col">Cancel</th>
                  <th scope="col">Update Payment Method</th>
                  <th scope="col">More Info</th>
                </tr>
              </thead>
            </table>
          </div>
        </div>
      </div>
      <div class="col-md-12 mx-8">
        <div id="modal" class="modal" style="display:none"> 
          <div class="modal-content">
            <div class="card-header">
              <h4 class="card-title">Subscription Details</h4>
            </div>
            <div class="card-body">
              <pre id="subdata"></pre>
              <div id="subModification" style="display:none">
                <table class="table" id="subUpdateTable">
                  <form>
                  <thead>
                    
                    <tr>
                      <th scope="col">Item Name</th>
                      <th scope="col">Item Price</th>
                      <th scope="col">Quantity</th>
                      <th scope = "col">Select</th>
                    </tr>
                  </thead>
                </form>
                </table>
              </div>
              <div id="subPreview" style="display:none">
                <pre id="subPreviewData"></pre>
              </div>
            </div>
            <div id="modalFooter"  class="card-footer">
              <button class="btn btn-danger" onclick="closemodal()">Close</button>
              <button class = "btn btn-primary" onclick="fetchTransactions()">Get Transaction PDF</button>
              <button class = "btn btn-secondary" onclick="displaySubModal()">Change Plan</button>
            </div>
            <div id="subUpdateFooter" class="card-footer" style="display:none">
              <button class="btn btn-danger" onclick="closeSubmodal()">Back</button>
            </div>
            <div id="subPreviewFooter" class="card-footer" style="display:none">
              <button class="btn btn-danger" onclick="closeSubPreviewmodal()">Back</button>
            </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <script src="https://cdn.paddle.com/paddle/v2/paddle.js"></script>
    <script>
      const $ = (x) => document.getElementById(x);
      let priceList = []
      var url = "http://localhost:8080"; // could pass this via env and fiber templating
      Paddle.Environment.set("sandbox");
      Paddle.Setup({
        seller: 749,
      });
      // gets ctm/subscription data and pushes it to a table
      async function emailSearch() {
        let email = $("emailInput").value;
        var endpoint = url + "/ctm/email/" + email;
        let ctm = "";
        axios
          .get(endpoint)
          .then(function (res) {
            $("submitBtn").style.display = "none";
            ctm = res.data.data.customer;
            axios
              .get(url + "/paddle/subscriptions/" + ctm)
              .then(function (res) {
                let data = res.data.data;
                if (data.length < 1) {
                  alert("No Subscriptions Found");
                } else {
                  for (i in res.data.data) {
                    //  console.log(res.data.data)
                    let newRow = document.createElement("tr");
                    let time = document.createElement("td");
                    let conversion = new Date(data[i].created_at);
                    let status = document.createElement("td");
                    let cancelurl = document.createElement("td");
                    let updateurl = document.createElement("td");
                    let moreurl = document.createElement("td");

                    time.innerHTML = conversion.toLocaleDateString();
                    status.innerHTML = data[i].status;

                    let cancelButton = document.createElement("button");
                    cancelButton.textContent = "Cancel";
                    cancelButton.className = "btn btn-danger";
                    cancelButton.onclick = function () {
                      cancelSub(data[i].id);
                    };

                    if (data[i].scheduled_change != null) {
                      if (data[i].scheduled_change.action == "cancel") {
                        let cancellationDate = new Date(
                          data[i].scheduled_change.effective_at
                        ).toLocaleDateString();
                        cancelButton.style.display = "none";
                        status.textContent =
                          "Cancelling on: " + cancellationDate;
                      }
                    }

                    cancelurl.appendChild(cancelButton);

                    let updateButton = document.createElement("button");
                    updateButton.textContent = "Update";
                    updateButton.className = "btn btn-primary";
                    updateButton.onclick = function () {
                      updateSub(data[i].id);
                    };

                    let moreButton = document.createElement("button");
                    moreButton.textContent = "More";
                    moreButton.id = data[i].id;
                    moreButton.className = "btn btn-info";
                    moreButton.onclick = function () {
                      displaySubscriptionInfo(data[i]);
                    };

                    moreurl.appendChild(moreButton);
                    cancelurl.appendChild(cancelButton);
                    updateurl.appendChild(updateButton);

                    newRow.appendChild(time);
                    newRow.appendChild(status);
                    newRow.appendChild(cancelurl);
                    newRow.appendChild(updateurl);
                    newRow.appendChild(moreurl);
                    $("subTable").appendChild(newRow);
                  }
                }
              });
          })
          .catch(function (error) {
            alert("Sorry, this email address is not in our system.");
          });
      }
      function refreshPage() {
        window.location.reload();
      }

      async function cancelSub(id) {
        let url = "http://localhost:8080/paddle/subscriptions/cancel/";
        alert(
          "Warning: Your subscription will be cancelled. Press OK to continue"
        );
        let request = await axios.post(url + id);
        refreshPage();
      }

      async function updateSub(id) {
        let url = "http://localhost:8080/paddle/subscriptions/update/";
        let request = await axios.post(url + id);
        openPaddle(request.data.data.id);
      }

      function openPaddle(txn) {
        Paddle.Checkout.open({
          settings: {
            displayMode: "overlay",
          },
          transactionId: txn,
        });
      }


      // Function to populate the modal with subscription information
      function displaySubscriptionInfo(subData) {
        const subscriptionInfo = subData
        let pauseControl = document.createElement('button')
        pauseControl.classList.add('btn')

        if (subData.scheduled_change === null && subData.status == 'active'){
          pauseControl.innerText = 'Pause Subscription'
          pauseControl.classList.add('btn-danger')
          pauseControl.onclick = () => pauseSubscription(subData.id)
        }
        else if (subData.paused_at != null && subData.scheduled_change.action != "pause"){
          pauseControl.innerText = 'Unpause Subscription'
          pauseControl.classList.add('btn-success')
          pauseControl.onclick = () => unpauseSubscription(subData.id,"immediately")
        }
        else if (subData.scheduled_change.action == "pause"){
          pauseControl.innerText = 'Unpause Subscription'
          pauseControl.classList.remove('btn-danger')
          pauseControl.classList.add('btn-success')
          pauseControl.onclick = () => unpauseSubscription(subData.id,"next_billing_period")
        }

        // Display the JSON data in the modal
        $('subdata').textContent = JSON.stringify(subscriptionInfo, null, 4);
        $('modalFooter').appendChild(pauseControl)
        $('modal').style.display = 'block';
        $('modal').dataset.subscription = subData.id
      }
      function closemodal(){
        $('modal').style.display = 'none';
      }

      async function fetchTransactions(){
        let subID = $('modal').dataset.subscription
        let url = "http://localhost:8080/paddle/subscriptions/transactions/"
        let transactions = await axios.post(url+subID)
        window.open(
          transactions.data.data.data.url);
      }

     async function displaySubModal(){
        const table = $('subUpdateTable')
        let url = "http://localhost:8080/paddle/prices"
        let response = await axios.get(url)
        let prices = response.data.data
        for (i in prices){
          if (prices[i].status == 'active' && prices[i].billing_cycle != null){
            let id = prices[i].id
            priceList.push(id)
            let newRow = document.createElement('tr')

          let itemName = document.createElement('td')
          itemName.innerText = prices[i].description

          let itemPrice = document.createElement('td')
          let itemUnitPrice = parseFloat(prices[i].unit_price.amount / 100).toFixed(2)
          itemPrice.innerText = itemUnitPrice + " " + prices[i].unit_price.currency_code

          let itemQuantity = document.createElement('input')
          console.log("creating:" + id)
          itemQuantity.id = id
          itemQuantity.type = 'number'
          itemQuantity.min = prices[i].quantity.minimum
          itemQuantity.max = prices[i].quantity.maximum

          let itemSelect = document.createElement('td')
          itemSelect.classList.add('btn')
          itemSelect.classList.add('btn-primary')
          itemSelect.innerText = 'Change Plan'
          itemSelect.onclick =() => changePlan(id)

          newRow.appendChild(itemName)
          newRow.appendChild(itemPrice)
          newRow.appendChild(itemQuantity)
          newRow.appendChild(itemSelect)
          table.appendChild(newRow)
          }

        }
        $('subdata').style.display = 'none';
        $('modalFooter').style.display="none";

        $('subModification').style.display="block";
        $('subUpdateFooter').style.display="block";
      }
      function closeSubmodal(){
        $('subModification').style.display = 'none';
        $('subUpdateFooter').style.display="none";

        $('subdata').style.display = 'block';
        $('modalFooter').style.display="block";
      }
      function closeSubPreviewmodal(){
        $('subPreview').style.display = 'none';
        $('subPreviewFooter').style.display="none";

        $('subModification').style.display = 'block';
        $('subUpdateFooter').style.display="block";
      }
      
      async function changePlan(id){
        let subscription = $('modal').dataset.subscription
        let price = $(id)
        let priceID = $(id).id
        let quant = parseInt(price.value)

        let url = "http://localhost:8080/paddle/subscriptions/change/preview/"+subscription
        let requestbody = {
          items:[{"price_id":priceID,"quantity":quant}],
          "proration_billing_mode":'prorated_immediately'
        }
        let response = await axios.post(url,requestbody)
        let responsedata = response.data.data

        $('subModification').style.display = 'none';
        $('subUpdateFooter').style.display="none";
        $('subPreview').style.display = 'block';
        $('subPreviewFooter').style.display="block";

        let confirmPurchase = document.createElement('button')
        confirmPurchase.innerText = "Confirm Update"
        confirmPurchase.onclick =() => changePlanConfirm(requestbody, subscription)

        let subTransaction =  document.createElement('p')
        if (responsedata.immediate_transaction != null){
          subTransaction.innerText = "Due Today: "+ parseFloat(responsedata.immediate_transaction.details.totals.grand_total / 100).toFixed(2) + " " + responsedata.currency_code
        } else (subTransaction.innerText = "Due Today: 0 ") + responsedata.currency_code

        let nextTransaction = document.createElement('p')
        if (responsedata.next_transaction != null){
          nextTransaction.innerText = "Due Next Billing Period: "+ parseFloat(responsedata.next_transaction.details.totals.grand_total / 100).toFixed(2) + " " + responsedata.currency_code
        } else (nextTransaction.innerText = "Due Next Billing Period: 0 ") + responsedata.currency_code
        
        $('subPreviewData').appendChild(confirmPurchase)
        $('subPreviewData').appendChild(subTransaction)
        $('subPreviewData').appendChild(nextTransaction)
        
      }

      async function changePlanConfirm (requestbody,subscription){
        let url = "http://localhost:8080/paddle/subscriptions/change/"+subscription
        let response = await axios.post(url,requestbody)
        let responsedata = response.data.data
        console.log(responsedata)
      } 

      async function pauseSubscription(id){
        let url = "http://localhost:8080/paddle/subscriptions/update/pause/"+id
        let requestbody = {
          "effective_from":"next_billing_period"
        }
        let response = await axios.post(url,requestbody)
        let responsedata = response.data.data
        console.log(responsedata)
      }

      async function unpauseSubscription(id,from){
        let url = "http://localhost:8080/paddle/subscriptions/update/unpause/"+id
        let requestbody = {
          "effective_from":from
        }
        let response = await axios.post(url,requestbody)
        let responsedata = response.data.data
        console.log(typeof(from))
        console.log(requestbody)
        console.log(responsedata)
      }


    </script>
  </body>
</html>
